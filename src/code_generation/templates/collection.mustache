import ky from "ky";
import { encode_search_params, Response, Response_Multiple } from "./utils/utils.js";

{{#child_collections}}
import { Collection_{{built_collection}} } from "{{ built_collection_path }}"
{{/child_collections}}

{{types}}

export class Collection_{{my_built_collection}} {
    path: string[]
    get_auth: () => Promise<any>
    collection_id: string
    collection_name_plural: string

    constructor(path: string[], get_auth: () => Promise<any>) {
        this.path = path;
        this.get_auth = get_auth;
        this.collection_id = "{{collection_id}}";
        this.collection_name_plural = "{{collection_name_plural}}"
    }

    
    async query(query: {{type_query}}): Promise<{{type_return}}[]>{
        try {
            let result = await ky.get(this.path.join('/'), {
                headers: {
                    authorization: await this.get_auth()
                },
                searchParams: encode_search_params(query)
            }).json() as Response_Multiple<{{type_return}}>;
            return result.data;
        } catch(err){
            return Promise.reject(err)
        }
    }

    async post(document: {{type_post}}): Promise<{{type_return}}>{
        try {
            let result = await ky.post(this.path.join('/'), {
                headers: {
                    authorization: await this.get_auth()
                },
                json: document
            }).json() as Response<{{type_return}}>;
            return result.data;
        } catch(err){
            return Promise.reject(err)
        }
    }

    document(document_id: string) {
        let path = this.path;
        let get_auth = this.get_auth;
        let collection_id = this.collection_id;
        let collection_name_plural = this.collection_name_plural;
        return new Document(path, collection_id, document_id, collection_name_plural, get_auth);
    }
}



class Document {
    path: string[];
    collection_id: string;
    document_id: string;
    collection_name_plural: string;
    get_auth: () => Promise<any>;

    constructor(path: string[], collection_id: string, document_id: string, collection_name_plural: string, get_auth: () => Promise<any>) {
        this.path = path;
        this.collection_id = collection_id;
        this.document_id = document_id;
        this.collection_name_plural = collection_name_plural;
        this.get_auth = get_auth;
    }

    async get(): Promise<{{type_return}}>{
        try {
            let result = await ky.get([...this.path, this.document_id].join('/'), {
                headers: {
                    authorization: await this.get_auth()
                },
            }).json() as Response<{{type_return}}>;
            return result.data;
        } catch(err){
            return Promise.reject(err)
        }
    }

    async put(update: {{type_put}}): Promise<{{type_return}}>{
        try {
            let result = await ky.put([...this.path, this.document_id].join('/'), {
                headers: {
                    authorization: await this.get_auth()
                },
                json: update
            }).json() as Response<{{type_return}}>;
            return result.data;
        } catch(err){
            return Promise.reject(err)
        }
    }
    
    async remove(): Promise<{{type_return}}>{
        try {
            let result = await ky.delete([...this.path, this.document_id].join('/'), {
                headers: {
                    authorization: await this.get_auth()
                },
            }).json() as Response<{{type_return}}>;
            return result.data;
        } catch(err){
            return Promise.reject(err)
        }
    }

    {{#has_subcollections}}
    {{#child_collections}}
    collection(collection_id: "{{collection_id}}"): Collection_{{built_collection}};
    {{/child_collections}}
    collection(collection_id: string) {
        switch(collection_id) {
            {{#child_collections}}
            case "{{collection_id}}":
                return new Collection_{{built_collection}}([...this.path, this.document_id, "{{collection_id}}"], this.get_auth);
            {{/child_collections}}
            default:
                throw new Error(`Api does not have the collection ${collection_id}`)
        }
    }
    {{/has_subcollections}}
}